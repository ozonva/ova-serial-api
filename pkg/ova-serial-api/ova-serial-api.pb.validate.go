// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ova-serial-api.proto

package ova_serial_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateSerialRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSerialRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Genre

	// no validation rules for Year

	// no validation rules for Seasons

	return nil
}

// CreateSerialRequestV1ValidationError is the validation error returned by
// CreateSerialRequestV1.Validate if the designated constraints aren't met.
type CreateSerialRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSerialRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSerialRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSerialRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSerialRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSerialRequestV1ValidationError) ErrorName() string {
	return "CreateSerialRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSerialRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSerialRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSerialRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSerialRequestV1ValidationError{}

// Validate checks the field values on CreateSerialResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSerialResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateSerialResponseV1ValidationError is the validation error returned by
// CreateSerialResponseV1.Validate if the designated constraints aren't met.
type CreateSerialResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSerialResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSerialResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSerialResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSerialResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSerialResponseV1ValidationError) ErrorName() string {
	return "CreateSerialResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSerialResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSerialResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSerialResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSerialResponseV1ValidationError{}

// Validate checks the field values on GetSerialRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSerialRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetSerialRequestV1ValidationError is the validation error returned by
// GetSerialRequestV1.Validate if the designated constraints aren't met.
type GetSerialRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSerialRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSerialRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSerialRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSerialRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSerialRequestV1ValidationError) ErrorName() string {
	return "GetSerialRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GetSerialRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSerialRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSerialRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSerialRequestV1ValidationError{}

// Validate checks the field values on MultiCreateSerialRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateSerialRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSerials() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateSerialRequestV1ValidationError{
					field:  fmt.Sprintf("Serials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateSerialRequestV1ValidationError is the validation error returned
// by MultiCreateSerialRequestV1.Validate if the designated constraints aren't met.
type MultiCreateSerialRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateSerialRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateSerialRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateSerialRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateSerialRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateSerialRequestV1ValidationError) ErrorName() string {
	return "MultiCreateSerialRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateSerialRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateSerialRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateSerialRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateSerialRequestV1ValidationError{}

// Validate checks the field values on GetSerialResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSerialResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSerial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSerialResponseV1ValidationError{
				field:  "Serial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSerialResponseV1ValidationError is the validation error returned by
// GetSerialResponseV1.Validate if the designated constraints aren't met.
type GetSerialResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSerialResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSerialResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSerialResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSerialResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSerialResponseV1ValidationError) ErrorName() string {
	return "GetSerialResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GetSerialResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSerialResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSerialResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSerialResponseV1ValidationError{}

// Validate checks the field values on ListSerialsRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSerialsRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListSerialsRequestV1ValidationError is the validation error returned by
// ListSerialsRequestV1.Validate if the designated constraints aren't met.
type ListSerialsRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSerialsRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSerialsRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSerialsRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSerialsRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSerialsRequestV1ValidationError) ErrorName() string {
	return "ListSerialsRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListSerialsRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSerialsRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSerialsRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSerialsRequestV1ValidationError{}

// Validate checks the field values on ListSerialsResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSerialsResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSerials() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSerialsResponseV1ValidationError{
					field:  fmt.Sprintf("Serials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSerialsResponseV1ValidationError is the validation error returned by
// ListSerialsResponseV1.Validate if the designated constraints aren't met.
type ListSerialsResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSerialsResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSerialsResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSerialsResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSerialsResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSerialsResponseV1ValidationError) ErrorName() string {
	return "ListSerialsResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListSerialsResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSerialsResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSerialsResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSerialsResponseV1ValidationError{}

// Validate checks the field values on RemoveSerialRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSerialRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemoveSerialRequestV1ValidationError is the validation error returned by
// RemoveSerialRequestV1.Validate if the designated constraints aren't met.
type RemoveSerialRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSerialRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSerialRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSerialRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSerialRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSerialRequestV1ValidationError) ErrorName() string {
	return "RemoveSerialRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSerialRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSerialRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSerialRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSerialRequestV1ValidationError{}

// Validate checks the field values on UpdateSerialRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSerialRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSerial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSerialRequestV1ValidationError{
				field:  "Serial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSerialRequestV1ValidationError is the validation error returned by
// UpdateSerialRequestV1.Validate if the designated constraints aren't met.
type UpdateSerialRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSerialRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSerialRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSerialRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSerialRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSerialRequestV1ValidationError) ErrorName() string {
	return "UpdateSerialRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSerialRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSerialRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSerialRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSerialRequestV1ValidationError{}

// Validate checks the field values on SerialV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SerialV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Genre

	// no validation rules for Year

	// no validation rules for Seasons

	return nil
}

// SerialV1ValidationError is the validation error returned by
// SerialV1.Validate if the designated constraints aren't met.
type SerialV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SerialV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SerialV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SerialV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SerialV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SerialV1ValidationError) ErrorName() string { return "SerialV1ValidationError" }

// Error satisfies the builtin error interface
func (e SerialV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSerialV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SerialV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SerialV1ValidationError{}
