// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_serial_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvaSerialV1Client is the client API for OvaSerialV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvaSerialV1Client interface {
	CreateSerial(ctx context.Context, in *CreateSerialRequestV1, opts ...grpc.CallOption) (*CreateSerialResponseV1, error)
	GetSerial(ctx context.Context, in *GetSerialRequestV1, opts ...grpc.CallOption) (*GetSerialResponseV1, error)
	ListSerials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSerialsResponseV1, error)
	RemoveSerial(ctx context.Context, in *RemoveSerialRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ovaSerialV1Client struct {
	cc grpc.ClientConnInterface
}

func NewOvaSerialV1Client(cc grpc.ClientConnInterface) OvaSerialV1Client {
	return &ovaSerialV1Client{cc}
}

func (c *ovaSerialV1Client) CreateSerial(ctx context.Context, in *CreateSerialRequestV1, opts ...grpc.CallOption) (*CreateSerialResponseV1, error) {
	out := new(CreateSerialResponseV1)
	err := c.cc.Invoke(ctx, "/ova.serial.api.OvaSerialV1/CreateSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaSerialV1Client) GetSerial(ctx context.Context, in *GetSerialRequestV1, opts ...grpc.CallOption) (*GetSerialResponseV1, error) {
	out := new(GetSerialResponseV1)
	err := c.cc.Invoke(ctx, "/ova.serial.api.OvaSerialV1/GetSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaSerialV1Client) ListSerials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSerialsResponseV1, error) {
	out := new(ListSerialsResponseV1)
	err := c.cc.Invoke(ctx, "/ova.serial.api.OvaSerialV1/ListSerials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaSerialV1Client) RemoveSerial(ctx context.Context, in *RemoveSerialRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.serial.api.OvaSerialV1/RemoveSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvaSerialV1Server is the server API for OvaSerialV1 service.
// All implementations must embed UnimplementedOvaSerialV1Server
// for forward compatibility
type OvaSerialV1Server interface {
	CreateSerial(context.Context, *CreateSerialRequestV1) (*CreateSerialResponseV1, error)
	GetSerial(context.Context, *GetSerialRequestV1) (*GetSerialResponseV1, error)
	ListSerials(context.Context, *emptypb.Empty) (*ListSerialsResponseV1, error)
	RemoveSerial(context.Context, *RemoveSerialRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedOvaSerialV1Server()
}

// UnimplementedOvaSerialV1Server must be embedded to have forward compatible implementations.
type UnimplementedOvaSerialV1Server struct {
}

func (UnimplementedOvaSerialV1Server) CreateSerial(context.Context, *CreateSerialRequestV1) (*CreateSerialResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSerial not implemented")
}
func (UnimplementedOvaSerialV1Server) GetSerial(context.Context, *GetSerialRequestV1) (*GetSerialResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerial not implemented")
}
func (UnimplementedOvaSerialV1Server) ListSerials(context.Context, *emptypb.Empty) (*ListSerialsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSerials not implemented")
}
func (UnimplementedOvaSerialV1Server) RemoveSerial(context.Context, *RemoveSerialRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSerial not implemented")
}
func (UnimplementedOvaSerialV1Server) mustEmbedUnimplementedOvaSerialV1Server() {}

// UnsafeOvaSerialV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvaSerialV1Server will
// result in compilation errors.
type UnsafeOvaSerialV1Server interface {
	mustEmbedUnimplementedOvaSerialV1Server()
}

func RegisterOvaSerialV1Server(s grpc.ServiceRegistrar, srv OvaSerialV1Server) {
	s.RegisterService(&OvaSerialV1_ServiceDesc, srv)
}

func _OvaSerialV1_CreateSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSerialRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaSerialV1Server).CreateSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.serial.api.OvaSerialV1/CreateSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaSerialV1Server).CreateSerial(ctx, req.(*CreateSerialRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaSerialV1_GetSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSerialRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaSerialV1Server).GetSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.serial.api.OvaSerialV1/GetSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaSerialV1Server).GetSerial(ctx, req.(*GetSerialRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaSerialV1_ListSerials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaSerialV1Server).ListSerials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.serial.api.OvaSerialV1/ListSerials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaSerialV1Server).ListSerials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaSerialV1_RemoveSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSerialRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaSerialV1Server).RemoveSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.serial.api.OvaSerialV1/RemoveSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaSerialV1Server).RemoveSerial(ctx, req.(*RemoveSerialRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// OvaSerialV1_ServiceDesc is the grpc.ServiceDesc for OvaSerialV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OvaSerialV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.serial.api.OvaSerialV1",
	HandlerType: (*OvaSerialV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSerial",
			Handler:    _OvaSerialV1_CreateSerial_Handler,
		},
		{
			MethodName: "GetSerial",
			Handler:    _OvaSerialV1_GetSerial_Handler,
		},
		{
			MethodName: "ListSerials",
			Handler:    _OvaSerialV1_ListSerials_Handler,
		},
		{
			MethodName: "RemoveSerial",
			Handler:    _OvaSerialV1_RemoveSerial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ova-serial-api.proto",
}
